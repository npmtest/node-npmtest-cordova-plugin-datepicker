{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-datepicker/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_datepicker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-datepicker/lib.npmtest_cordova_plugin_datepicker.js":"/* istanbul instrument in package npmtest_cordova_plugin_datepicker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_datepicker = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_datepicker = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-datepicker/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-datepicker && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_datepicker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_datepicker\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_datepicker.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_datepicker.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_datepicker.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_datepicker.__dirname + '/lib.npmtest_cordova_plugin_datepicker.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-datepicker/node_modules/cordova-plugin-datepicker/index.js":"","/home/travis/build/npmtest/node-npmtest-cordova-plugin-datepicker/node_modules/cordova-plugin-datepicker/src/windows/DatePickerProxy.js":"/*\r\n *\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n *\r\n*/\r\n\r\n/*global Windows, WinJS*/\r\n\r\nvar cordova = require('cordova');\r\n\r\nmodule.exports = {\r\n\t\r\n    date: function (success, error, args) {\r\n\t\t\r\n\t\tmodule.exports.winJSDatePicker.show(success, error, \"date\", args[0]);\r\n\r\n    },\r\n\r\n    time: function (success, error, args) {\r\n\t\t\r\n\t\tmodule.exports.winJSDatePicker.show(success, error, \"time\", args[0]);\r\n\t\t\r\n    },\r\n\r\n    datetime: function (success, error, args) {\r\n\t\t\r\n\t\tmodule.exports.winJSDatePicker.show(success, error, \"datetime\", args[0]);\r\n\r\n    },\r\n\r\n    winJSDatePicker : {\r\n\t\r\n        show: function(success, error, pickertype, options){\r\n            /* options = {\r\n            mode : 'date/time/datetime',\r\n            date : selected date in format \"month/day/year/hours/minutes\",\r\n            minDate: 0 or DateObj,\r\n            maxDate: 0 or DateObj,\r\n            clearText: 'Clear'\r\n            }\r\n            */\r\n\r\n            if (options.date) {\r\n                var dateParts = options.date.split(\"/\");\r\n\r\n                var month = dateParts[0] <= 9 ? '0' + dateParts[0] : dateParts[0],\r\n                    day = dateParts[1] <= 9 ? '0' + dateParts[1] : dateParts[1],\r\n                    hours = dateParts[3] <= 9 ? '0' + dateParts[3] : dateParts[3],\r\n                    minutes = dateParts[4] <= 9 ? '0' + dateParts[4] : dateParts[4];\r\n\r\n                var dateTimeString = \"\" + dateParts[2] + \"-\" + month + \"-\" + day + \"T\" + hours + \":\" + minutes + \":00\";\r\n\r\n                options.date = new Date(dateTimeString);\r\n\r\n            }\r\n            else {\r\n                options.date = new Date();\r\n            }\r\n\r\n            if (!options.minDate) {\r\n                options.minDate = new Date (\"1970-01-01T00:00:00\")\r\n            }\r\n\r\n            if (!options.maxDate) {\r\n                options.maxDate = new Date(\"2050-01-01T00:00:00\");\r\n            }\r\n            \r\n            var buttonCSSText = \"border: 3px solid white; background:#000; color:#FFF; border-radius:0; width: 90%; height: 90%; font-size: 2em;\"\r\n\r\n            var overlay = document.createElement(\"div\");\r\n            var overlay_id = \"winjsoverlay\";\r\n            overlay.id = overlay_id;\r\n            overlay.style.cssText = \"position: fixed; left: 0; top: 0; right:0; bottom:0; width: 100%; height: 100%; z-index: 999; margin: 0 auto; background: #000; -ms-touch-action:none;\";\r\n\r\n\r\n\r\n            var pickerDivTable = document.createElement(\"div\");\r\n            pickerDivTable.style.cssText = \"width:90%; height: 90%; display: table; text-align:center; margin: 0 auto; padding:0;\";\r\n\r\n            var pickerDiv = document.createElement(\"div\");\r\n            pickerDiv.id = \"winjsdatetimepickerContainer\";\r\n            pickerDiv.style.cssText = \"display: table-cell; vertical-align:middle; text-align:center;\";\r\n\r\n            pickerDivTable.appendChild(pickerDiv);\r\n\r\n            //insert timepicker if needed\r\n            if (pickertype.indexOf(\"time\") >= 0){\r\n                var timePickerTable = document.createElement(\"table\");\r\n                timePickerTable.style.cssText = \"table-layout:fixed; width:100%; margin: 0 auto; padding:0;\";\r\n\r\n                var timePickerDescriptionRow = document.createElement(\"tr\");\r\n                timePickerTable.appendChild(timePickerDescriptionRow);\r\n\r\n                var timePickerInputRow = document.createElement(\"tr\");\r\n                timePickerTable.appendChild(timePickerInputRow);\r\n\r\n                for (var i = 0; i < 2; i++) {\r\n                    var descriptionElement = document.createElement(\"td\");\r\n                    timePickerDescriptionRow.appendChild(descriptionElement);\r\n\r\n                    var cell = document.createElement(\"td\");\r\n                    timePickerInputRow.appendChild(cell);\r\n\r\n                    var timePickerSelect = document.createElement(\"select\");\r\n                    timePickerSelect.style.cssText = buttonCSSText;\r\n                    timePickerSelect.setAttribute(\"data-tap-disabled\",\"true\");\r\n\r\n                    cell.appendChild(timePickerSelect);\r\n\r\n                    if (i == 0) {\r\n                        timePickerSelect.id = \"winjsdatepickerHours\";\r\n                        descriptionElement.textContent = \"hours\";\r\n\r\n                        for (var h = 0; h <= 23; h++) {\r\n                            var option = document.createElement(\"option\");\r\n                            option.textContent = h <= 9 ? \"0\" + h : h;\r\n                            option.value = h;\r\n\r\n                            if (h == options.date.getHours()) {\r\n                                option.setAttribute(\"selected\", \"selected\");\r\n                            }\r\n\r\n                            timePickerSelect.appendChild(option);\r\n                        }\r\n                    }\r\n                    else if (i == 1) {\r\n                        timePickerSelect.id = \"winjsdatepickerMinutes\";\r\n                        descriptionElement.textContent = \"minutes\";\r\n\r\n                        for (var m = 0 ; m <= 59; m++) {\r\n                            var option = document.createElement(\"option\");\r\n                            option.textContent = m <= 9 ? \"0\" + m : m;\r\n                            option.value = m;\r\n\r\n                            if (m == options.date.getMinutes()) {\r\n                                option.setAttribute(\"selected\", \"selected\");\r\n                            }\r\n\r\n                            timePickerSelect.appendChild(option);\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n\r\n                //not supported on phone 8.1\r\n                //var timePicker = new WinJS.UI.TimePicker(timePickerDiv, options);\r\n                \r\n                pickerDiv.appendChild(timePickerTable);\r\n            }\r\n\r\n            //insert date picker if needed\r\n            if (pickertype.indexOf(\"date\") >= 0) {\r\n\r\n                var datePickerTable = document.createElement(\"table\");\r\n                datePickerTable.style.cssText = \"table-layout:fixed; width:100%; margin: 0 auto; padding:0;\";\r\n\r\n                var datePickerDescriptionRow = document.createElement(\"tr\");\r\n                datePickerTable.appendChild(datePickerDescriptionRow);\r\n\r\n                var datePickerInputRow = document.createElement(\"tr\");\r\n                datePickerTable.appendChild(datePickerInputRow);\r\n\r\n                for (var i = 0; i < 3; i++) {\r\n\r\n                    var descriptionElement = document.createElement(\"td\");\r\n                    datePickerDescriptionRow.appendChild(descriptionElement);\r\n\r\n                    var cell = document.createElement(\"td\");\r\n\r\n                    var datePickerSelect = document.createElement(\"select\");\r\n                    datePickerSelect.style.cssText = buttonCSSText;\r\n                    datePickerSelect.setAttribute(\"data-tap-disabled\",\"true\");\r\n                    if (i == 0) {\r\n                        datePickerSelect.id = \"winjsdatepickerYear\";\r\n                        descriptionElement.textContent = \"year\";\r\n\r\n                        for (var y=1970; y<=2050; y++) {\r\n                            var option = document.createElement(\"option\");\r\n                            option.textContent = y;\r\n                            option.value = y;\r\n\r\n                            if (y == options.date.getFullYear()) {\r\n                                option.setAttribute(\"selected\", \"selected\");\r\n                            }\r\n\r\n                            datePickerSelect.appendChild(option);\r\n                        }\r\n\r\n                        \r\n                    }\r\n                    else if (i == 1) {\r\n                        datePickerSelect.id = \"winjsdatepickerMonth\";\r\n                        descriptionElement.textContent = \"month\";\r\n\r\n                        for (var m=1 ; m<=12; m++) {\r\n                            var option = document.createElement(\"option\");\r\n                            option.textContent = m <=9 ? \"0\" + m : m;\r\n                            option.value = m;\r\n                            \r\n                            if (m == options.date.getMonth()+1) {\r\n                                option.setAttribute(\"selected\", \"selected\");\r\n                            }\r\n\r\n                            datePickerSelect.appendChild(option);\r\n                        }\r\n                    }\r\n                    else if (i == 2) {\r\n                        datePickerSelect.id = \"winjsdatepickerDay\";\r\n                        descriptionElement.textContent = \"day\";\r\n\r\n                        for (var d=1; d<=31; d++) {\r\n                            var option = document.createElement(\"option\");\r\n                            option.textContent = d <= 9 ? \"0\" + d : d;\r\n                            option.value = d;\r\n\r\n                            if (d == options.date.getDate()) {\r\n                                option.setAttribute(\"selected\", \"selected\");\r\n                            }\r\n\r\n                            datePickerSelect.appendChild(option);\r\n                        }\r\n                    }\r\n\r\n                    datePickerSelect.addEventListener(\"change\", function () {\r\n                        //checkMinMaxDate\r\n                        var year = document.getElementById(\"winjsdatepickerYear\"),\r\n                            month = document.getElementById(\"winjsdatepickerMonth\"),\r\n                            day = document.getElementById(\"winjsdatepickerDay\"),\r\n                            maxYear = options.maxDate.getFullYear(),\r\n                            minYear = options.minDate.getFullYear(),\r\n                            maxMonth = options.maxDate.getMonth()+1,\r\n                            minMonth = options.minDate.getMonth()+1,\r\n                            maxDay = options.maxDate.getDate(),\r\n                            minDay = options.minDate.getDate();\r\n\r\n\r\n                        if (year.value > maxYear) {\r\n                            year.value = maxYear;\r\n                        }\r\n                        else if (year.value < minYear) {\r\n                            year.value = minYear;\r\n                        }\r\n\r\n                        if (year.value == maxYear) {\r\n                            if (month.value > maxMonth) {\r\n                                month.value = maxMonth;\r\n                            }\r\n\r\n                            if (month.value == maxMonth) {\r\n                                if (day.value > maxDay) {\r\n                                    day.value = maxDay;\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        else if (year.value == minYear) {\r\n                            if (month.value < minMonth) {\r\n                                month.value = minMonth;\r\n                            }\r\n\r\n                            if (month.value == minMonth) {\r\n                                if (day.value < minDay) {\r\n                                    day.value = minDay;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    }, false);\r\n\r\n                    cell.appendChild(datePickerSelect);\r\n\r\n                    datePickerInputRow.appendChild(cell);\r\n\r\n                }\r\n\r\n                pickerDiv.appendChild(datePickerTable);\r\n                //not supported on phone 8.1\r\n                //var datePicker = new WinJS.UI.DatePicker(datePickerDiv, options);\r\n                //datePicker.onchange = module.exports.checkMinMaxDate;\r\n\r\n            }\r\n\r\n            overlay.appendChild(pickerDivTable);\r\n\r\n            overlayFooter = document.createElement(\"div\");\r\n            overlayFooter.style.cssText = \"position: fixed; bottom:0; left:0; right:0; z-index: 1000; width: 100%; height: 10%; display: table; text-align:center; vertical-align:middle;\";\r\n            overlay.appendChild(overlayFooter);\r\n\r\n            var leftCell = document.createElement(\"div\");\r\n            leftCell.style.cssText = \"display: table-cell; width: 50%\";\r\n            overlayFooter.appendChild(leftCell);\r\n\r\n            var rightCell = document.createElement(\"div\");\r\n            rightCell.style.cssText = \"display: table-cell; width: 50%\";\r\n            overlayFooter.appendChild(rightCell);\r\n\r\n            var cancelButton = document.createElement(\"button\");\r\n            cancelButton.innerText = \"Cancel\";\r\n            cancelButton.style.cssText = buttonCSSText;\r\n\r\n            cancelButton.addEventListener(\"click\", function(){\r\n\t\t\t\r\n                overlay.parentElement.removeChild(overlay);\r\n\t\t\t\r\n            });\r\n\r\n            rightCell.appendChild(cancelButton);\r\n\r\n            var useButton = document.createElement(\"button\");\r\n            useButton.innerText = \"Use\";\r\n            useButton.style.cssText = buttonCSSText;\r\n\t\t\r\n            useButton.addEventListener(\"click\", function () {\r\n                //read input and return Date Object\r\n                var year = document.getElementById(\"winjsdatepickerYear\"),\r\n                    month = document.getElementById(\"winjsdatepickerMonth\"),\r\n                    day = document.getElementById(\"winjsdatepickerDay\"),\r\n                    hours = document.getElementById(\"winjsdatepickerHours\"),\r\n                    minutes = document.getElementById(\"winjsdatepickerMinutes\");\r\n\r\n                var dateTimeStr = \"\";\r\n\r\n                if (pickertype.indexOf(\"date\") >= 0) {\r\n                    dateTimeStr = \"\" + (year.value <= 9 ? \"0\" + year.value : year.value) + \"-\" + (month.value <= 9 ? \"0\" + month.value : month.value) + \"-\" + (day.value <= 9 ? \"0\" + day.value : day.value);\r\n                }\r\n                else {\r\n                    dateTimeStr = \"1970-01-01\";\r\n                }\r\n\r\n                if (pickertype.indexOf(\"time\") >= 0) {\r\n                    dateTimeStr = dateTimeStr + \"T\" + (hours.value <= 9 ? \"0\" + hours.value : hours.value) + \":\" + (minutes.value <= 9 ? \"0\" + minutes.value : minutes.value) + \":00\";\r\n                }\r\n                \r\n                overlay.parentElement.removeChild(overlay);\r\n                success(dateTimeStr);\r\n\r\n\r\n            });\r\n\r\n            leftCell.appendChild(useButton);\r\n\r\n            document.body.appendChild(overlay);\r\n            \r\n        }\r\n    }\r\n};\r\n\r\nrequire(\"cordova/exec/proxy\").add(\"DatePickerPlugin\",module.exports);\r\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-datepicker/node_modules/cordova-plugin-datepicker/www/android/DatePicker.js":"/**\r\n * Phonegap DatePicker Plugin Copyright (c) Greg Allen 2011 MIT Licensed\r\n * Reused and ported to Android plugin by Daniel van 't Oever\r\n */\r\n\r\n/**\r\n * Constructor\r\n */\r\nfunction DatePicker() {\r\n  //this._callback;\r\n}\r\n\r\n/**\r\n * Android themes\r\n */\r\nDatePicker.prototype.ANDROID_THEMES = {\r\n  THEME_TRADITIONAL          : 1, // default\r\n  THEME_HOLO_DARK            : 2,\r\n  THEME_HOLO_LIGHT           : 3,\r\n  THEME_DEVICE_DEFAULT_DARK  : 4,\r\n  THEME_DEVICE_DEFAULT_LIGHT : 5\r\n};\r\n\r\n/**\r\n * show - true to show the ad, false to hide the ad\r\n */\r\nDatePicker.prototype.show = function(options, cb, errCb) {\r\n\r\n\tif (options.date && options.date instanceof Date) {\r\n\t\toptions.date = (options.date.getMonth() + 1) + \"/\" +\r\n\t\t\t\t\t   (options.date.getDate()) + \"/\" +\r\n\t\t\t\t\t   (options.date.getFullYear()) + \"/\" +\r\n\t\t\t\t\t   (options.date.getHours()) + \"/\" +\r\n\t\t\t\t\t   (options.date.getMinutes());\r\n\t}\r\n\r\n\tvar defaults = {\r\n\t\tmode : 'date',\r\n\t\tdate : '',\r\n\t\tminDate: 0,\r\n\t\tmaxDate: 0,\r\n\t\ttitleText: '',\r\n\t\tcancelText: '',\r\n\t\tokText: '',\r\n\t\ttodayText: '',\r\n\t\tnowText: '',\r\n\t\tis24Hour: false,\r\n    androidTheme : window.datePicker.ANDROID_THEMES.THEME_TRADITIONAL, // Default theme\r\n\t};\r\n\r\n\tfor (var key in defaults) {\r\n\t\tif (typeof options[key] !== \"undefined\") {\r\n\t\t\tdefaults[key] = options[key];\r\n\t\t}\r\n\t}\r\n\r\n\t//this._callback = cb;\r\n\r\n\tvar callback = function(message) {\r\n\t\tif(message != 'error'){\r\n\t\t\tvar timestamp = Date.parse(message);\r\n\t\t\tif(isNaN(timestamp) == false) {\r\n\t\t\t\tcb(new Date(message));\r\n\t\t\t}\r\n\t        else {\r\n\t            cb();\r\n\t        }\r\n\t\t} else {\r\n\t\t\t// TODO error popup?\r\n    \t}\r\n\t}\r\n\r\n\tvar errCallback = function(message) {\r\n\t\tif (typeof errCb === 'function') {\r\n\t\t\terrCb(message);\r\n\t\t}\r\n\t}\r\n\r\n\tcordova.exec(callback,\r\n\t\terrCallback,\r\n\t\t\"DatePickerPlugin\",\r\n\t\tdefaults.mode,\r\n\t\t[defaults]\r\n\t);\r\n};\r\n\r\nvar datePicker = new DatePicker();\r\nmodule.exports = datePicker;\r\n\r\n// Make plugin work under window.plugins\r\nif (!window.plugins) {\r\n    window.plugins = {};\r\n}\r\nif (!window.plugins.datePicker) {\r\n    window.plugins.datePicker = datePicker;\r\n}\r\n"}